diff --git a/src/ui/iconprovider.cpp b/src/ui/iconprovider.cpp
index f852d45..a8ac8ef 100644
--- a/src/ui/iconprovider.cpp
+++ b/src/ui/iconprovider.cpp
@@ -1,5 +1,6 @@
 #include "include/iconprovider.h"
 #include "include/svgiconengine.h"
+#include "include/qextendediconengine.h"
 
 #include <QDebug>
 #include <QFileInfo>
@@ -8,16 +9,13 @@ IconProvider::IconProvider()
 {
 }
 
-QIcon IconProvider::fromTheme(const QString &name)
+QIcon IconProvider::getFallbackIcon(const QString &name)
 {
     // FIXME Cache the icons
 
     QString basePath = ":/icons/notepadqq/%1/%2.%3";
 
-    if (QIcon::hasThemeIcon(name)) {
-        return QIcon::fromTheme(name);
-
-    } else if (QFileInfo(basePath.arg("scalable").arg(name).arg("svg")).exists()) {
+    if (QFileInfo(basePath.arg("scalable").arg(name).arg("svg")).exists()) {
         return QIcon(SVGIconEngine::fromFile(basePath.arg("scalable").arg(name).arg("svg")));
 
     } else {
@@ -36,8 +34,10 @@ QIcon IconProvider::fromTheme(const QString &name)
         }
 
         for (const QPair<int, QString> & size : sizes) {
-            icon.addFile(basePath.arg(size.second).arg(name).arg("png"),
-                         QSize(size.first, size.first));
+            if (QFileInfo(basePath.arg(size.second).arg(name).arg("png")).exists()) {
+                icon.addFile(basePath.arg(size.second).arg(name).arg("png"),
+                             QSize(size.first, size.first));
+            }
         }
 
         // Warn about missing icons.
@@ -50,3 +50,33 @@ QIcon IconProvider::fromTheme(const QString &name)
         return icon;
     }
 }
+
+QIcon IconProvider::fromTheme(const QString &iconName, const QString &fallbackName)
+{
+    return QIcon(new QExtendedIconEngine(iconName, fallbackName));
+}
+
+QIcon IconProvider::fromTheme(const QString &iconName, const bool &fallbackBuiltin)
+{
+    return IconProvider::fromTheme(iconName, fallbackBuiltin ? iconName : QString());
+}
+
+QIcon IconProvider::fromTheme(const QStringList &iconNames, const QString &fallbackName)
+{
+    return QIcon(new QExtendedIconEngine(iconNames, fallbackName));
+}
+
+QIcon IconProvider::fromTheme(const QStringList &iconNames, const bool &fallbackBuiltin)
+{
+    return IconProvider::fromTheme(iconNames, fallbackBuiltin ? (!iconNames.isEmpty() ? iconNames.constFirst() : QString()) : QString());
+}
+
+QIcon IconProvider::fromTheme(const QString &iconName, const QStringList &iconNames, const QString &fallbackName)
+{
+    return IconProvider::fromTheme(QStringList(iconName) + iconNames, fallbackName);
+}
+
+QIcon IconProvider::fromTheme(const QString &iconName, const QStringList &iconNames, const bool &fallbackBuiltin)
+{
+    return IconProvider::fromTheme(iconName, iconNames, fallbackBuiltin ? iconName : QString());
+}
diff --git a/src/ui/include/iconprovider.h b/src/ui/include/iconprovider.h
index 791fb5a..96016a9 100644
--- a/src/ui/include/iconprovider.h
+++ b/src/ui/include/iconprovider.h
@@ -7,7 +7,13 @@ class IconProvider
 {
 public:
     IconProvider();
-    static QIcon fromTheme(const QString &name);
+    static QIcon getFallbackIcon(const QString &name);
+    static QIcon fromTheme(const QString &iconName, const QString &fallbackName);
+    static QIcon fromTheme(const QString &iconName, const bool &fallbackBuiltin = true);
+    static QIcon fromTheme(const QStringList &iconNames, const QString &fallbackName);
+    static QIcon fromTheme(const QStringList &iconNames, const bool &fallbackBuiltin = true);
+    static QIcon fromTheme(const QString &iconName, const QStringList &iconNames, const QString &fallbackName);
+    static QIcon fromTheme(const QString &iconName, const QStringList &iconNames, const bool &fallbackBuiltin = true);
 };
 
 #endif // ICONPROVIDER_H
diff --git a/src/ui/include/qextendediconengine.h b/src/ui/include/qextendediconengine.h
new file mode 100644
index 0000000..5cfaa7a
--- /dev/null
+++ b/src/ui/include/qextendediconengine.h
@@ -0,0 +1,62 @@
+#ifndef QEXTENDEDICONENGINE_H
+#define QEXTENDEDICONENGINE_H
+
+#include <QIcon>
+#include <QIconEngine>
+#include <memory>
+
+QT_BEGIN_NAMESPACE
+
+class Q_GUI_EXPORT QExtendedIconEngine : public QIconEngine
+{
+public:
+    QExtendedIconEngine();
+    QExtendedIconEngine(const QExtendedIconEngine &extendedIconEngine);
+    QExtendedIconEngine(const QIcon &icon, const QString &fallbackName);
+    QExtendedIconEngine(const QIcon &icon, const bool &fallbackBuiltin = true) : QExtendedIconEngine(icon, fallbackBuiltin ? icon.name() : QString()) {}
+    QExtendedIconEngine(const QString &iconName, const bool &fallbackBuiltin = true) : QExtendedIconEngine(QIcon::fromTheme(iconName), fallbackBuiltin) {}
+    QExtendedIconEngine(const QString &iconName, const QString &fallbackName) : QExtendedIconEngine(QIcon::fromTheme(iconName), fallbackName) {}
+    QExtendedIconEngine(const QIcon &icon, const QExtendedIconEngine &fallback);
+    QExtendedIconEngine(const QString &iconName, const QExtendedIconEngine &fallback) : QExtendedIconEngine(QIcon::fromTheme(iconName), fallback) {}
+    QExtendedIconEngine(const QIcon &icon, std::shared_ptr<QExtendedIconEngine> fallback);
+    QExtendedIconEngine(const QString &iconName, std::shared_ptr<QExtendedIconEngine> fallback) : QExtendedIconEngine(QIcon::fromTheme(iconName), fallback) {}
+    QExtendedIconEngine(const QStringList &iconNames, const QString &fallbackName);
+    QExtendedIconEngine(const QStringList &iconNames, const bool &fallbackBuiltin = true) : QExtendedIconEngine(iconNames, fallbackBuiltin ? (!iconNames.isEmpty() ? iconNames.constFirst() : QString()) : QString()) {}
+    QExtendedIconEngine(const QString &iconName, const QStringList &iconNames, const QString &fallbackName) : QExtendedIconEngine(QStringList(iconName) + iconNames, fallbackName) {}
+    QExtendedIconEngine(const QString &iconName, const QStringList &iconNames, const bool &fallbackBuiltin = true) : QExtendedIconEngine(iconName, iconNames, fallbackBuiltin ? iconName : QString()) {}
+    void paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state) override;
+    QSize actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state) override;
+    QPixmap pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state) override;
+
+    QString key() const override;
+    QIconEngine *clone() const override;
+
+    QList<QSize> availableSizes(QIcon::Mode mode = QIcon::Normal,
+                                    QIcon::State state = QIcon::Off) const override;
+
+    QString iconName() const override;
+    //bool isNull() const override; // ### Qt6 make virtual
+
+    void virtual_hook(int id, void *data) override;
+
+    void setIcon(const QIcon &icon);
+    void setFallback(const QExtendedIconEngine &fallback);
+    void setFallback(std::shared_ptr<QExtendedIconEngine> fallback);
+    void set(const QIcon &icon, const QExtendedIconEngine &fallback);
+    void set(const QIcon &icon, std::shared_ptr<QExtendedIconEngine> fallback);
+    void unsetIcon();
+    void unsetFallback();
+    void unset();
+	bool hasFallback() const;
+
+    QIcon getIcon() const;
+    QIcon getIconDefault() const;
+    std::shared_ptr<QExtendedIconEngine> getFallback() const;
+private:
+    QIcon icon = QIcon();
+    std::shared_ptr<QExtendedIconEngine> fallback = nullptr;
+};
+
+QT_END_NAMESPACE
+
+#endif // QEXTENDEDICONENGINE_H
diff --git a/src/ui/mainwindow.cpp b/src/ui/mainwindow.cpp
index eb9197f..6d5d9b1 100644
--- a/src/ui/mainwindow.cpp
+++ b/src/ui/mainwindow.cpp
@@ -275,12 +275,12 @@ void MainWindow::loadIcons()
     ui->actionOpen->setIcon(IconProvider::fromTheme("document-open"));
     ui->actionReload_from_Disk->setIcon(IconProvider::fromTheme("view-refresh"));
     ui->actionSave->setIcon(IconProvider::fromTheme("document-save"));
-    ui->actionSave_as->setIcon(IconProvider::fromTheme("document-save-as"));
-    ui->actionSave_a_Copy_As->setIcon(IconProvider::fromTheme("document-save-as"));
-    ui->actionSave_All->setIcon(IconProvider::fromTheme("document-save-all"));
-    ui->actionClose->setIcon(IconProvider::fromTheme("document-close"));
-    ui->actionClose_All->setIcon(IconProvider::fromTheme("document-close-all"));
-    ui->menuRecent_Files->setIcon(IconProvider::fromTheme("document-open-recent"));
+    ui->actionSave_as->setIcon(IconProvider::fromTheme("document-save-as", QStringList() << "document-save"));
+    ui->actionSave_a_Copy_As->setIcon(IconProvider::fromTheme("document-save-as", QStringList() << "document-save"));
+    ui->actionSave_All->setIcon(IconProvider::fromTheme("document-save-all", QStringList() << "document-save"));
+    ui->actionClose->setIcon(IconProvider::fromTheme("document-close", QStringList() << "window-close"));
+    ui->actionClose_All->setIcon(IconProvider::fromTheme("document-close-all", QStringList() << "document-close" << "window-close"));
+    ui->menuRecent_Files->setIcon(IconProvider::fromTheme("document-open-recent", QStringList() << "document-open"));
     ui->actionExit->setIcon(IconProvider::fromTheme("application-exit"));
     ui->actionPrint->setIcon(IconProvider::fromTheme("document-print"));
     ui->actionPrint_Now->setIcon(IconProvider::fromTheme("document-print")); // currently invisible
@@ -328,7 +328,7 @@ void MainWindow::loadIcons()
     ui->action_Stop_Recording->setIcon(IconProvider::fromTheme("media-playback-stop"));
     ui->action_Playback->setIcon(IconProvider::fromTheme("media-playback-start"));
     ui->actionRun_a_Macro_Multiple_Times->setIcon(IconProvider::fromTheme("media-seek-forward"));
-    ui->actionSave_Currently_Recorded_Macro->setIcon(IconProvider::fromTheme("document-save-as"));
+    ui->actionSave_Currently_Recorded_Macro->setIcon(IconProvider::fromTheme("document-save-as", QStringList() << "document-save"));
 }
 
 void MainWindow::configureStatusBar()
diff --git a/src/ui/qextendediconengine.cpp b/src/ui/qextendediconengine.cpp
new file mode 100644
index 0000000..1d9039a
--- /dev/null
+++ b/src/ui/qextendediconengine.cpp
@@ -0,0 +1,223 @@
+#include "include/qextendediconengine.h"
+#include "include/iconprovider.h"
+
+#include <QPainter>
+#include <iterator>
+
+QT_BEGIN_NAMESPACE
+
+QExtendedIconEngine::QExtendedIconEngine() : QIconEngine()
+{
+}
+
+QExtendedIconEngine::QExtendedIconEngine(const QExtendedIconEngine &extendedIconEngine) : QIconEngine(extendedIconEngine)
+{
+    this->icon = QIcon(extendedIconEngine.getIconDefault());
+    if (extendedIconEngine.hasFallback())
+    {
+        this->fallback = std::make_shared<QExtendedIconEngine>(QExtendedIconEngine(*(extendedIconEngine.getFallback())));
+    }
+}
+
+QExtendedIconEngine::QExtendedIconEngine(const QIcon &icon, const QString &fallbackName) : QIconEngine()
+{
+    this->icon = QIcon(icon);
+    if (!fallbackName.isEmpty())
+    {
+        QIcon iconFallback = IconProvider::getFallbackIcon(fallbackName);
+        if (!iconFallback.isNull())
+        {
+            this->fallback = std::make_shared<QExtendedIconEngine>(QExtendedIconEngine(iconFallback, false));
+        }
+    }
+}
+
+QExtendedIconEngine::QExtendedIconEngine(const QIcon &icon, const QExtendedIconEngine &fallback) : QIconEngine()
+{
+    this->icon = QIcon(icon);
+    this->fallback = std::make_shared<QExtendedIconEngine>(QExtendedIconEngine(fallback));
+}
+
+QExtendedIconEngine::QExtendedIconEngine(const QIcon &icon, std::shared_ptr<QExtendedIconEngine> fallback) : QIconEngine()
+{
+    this->icon = QIcon(icon);
+    this->fallback = fallback;
+}
+
+QExtendedIconEngine::QExtendedIconEngine(const QStringList &iconNames, const QString &fallbackName) : QIconEngine()
+{
+    QIcon iconFallback = QIcon();
+    if (!fallbackName.isEmpty())
+    {
+        iconFallback = IconProvider::getFallbackIcon(fallbackName);
+    }
+
+    if (iconNames.isEmpty())
+    {
+        if (!iconFallback.isNull())
+        {
+            this->icon = iconFallback;
+        }
+    }
+    else
+    {
+        this->icon = QIcon::fromTheme(iconNames.constFirst());
+        std::shared_ptr<QExtendedIconEngine> extendedIconEngine = nullptr;
+        if (!iconFallback.isNull())
+        {
+            extendedIconEngine = std::make_shared<QExtendedIconEngine>(QExtendedIconEngine(iconFallback, false));
+        }
+
+        if (iconNames.count() >= 2)
+        {
+            for (QStringList::const_reverse_iterator it = iconNames.crbegin(), end = std::prev(iconNames.crend()); it != end; ++it)
+            {
+                extendedIconEngine = std::make_shared<QExtendedIconEngine>(QExtendedIconEngine(*it, extendedIconEngine));
+            }
+        }
+
+        this->fallback = extendedIconEngine;
+    }
+}
+
+void QExtendedIconEngine::paint(QPainter *painter, const QRect &rect, QIcon::Mode mode, QIcon::State state)
+{
+    QSize pixmapSize = rect.size();
+    #if defined(Q_WS_MAC)
+    pixmapSize *= qt_mac_get_scalefactor();
+    #endif
+    painter->drawPixmap(rect, pixmap(pixmapSize, mode, state));
+}
+
+QSize QExtendedIconEngine::actualSize(const QSize &size, QIcon::Mode mode, QIcon::State state)
+{
+    return getIcon().actualSize(size, mode, state);
+}
+
+QPixmap QExtendedIconEngine::pixmap(const QSize &size, QIcon::Mode mode, QIcon::State state)
+{
+    return getIcon().pixmap(size, mode, state);
+}
+
+QString QExtendedIconEngine::key() const
+{
+    return QString("QExtendedIconEngine");
+}
+
+QIconEngine *QExtendedIconEngine::clone() const
+{
+    return new QExtendedIconEngine(*this);
+}
+
+QList<QSize> QExtendedIconEngine::availableSizes(QIcon::Mode mode, QIcon::State state) const
+{
+    return getIcon().availableSizes(mode, state);
+}
+
+QString QExtendedIconEngine::iconName() const
+{
+    return getIcon().name();
+}
+
+/*
+bool QExtendedIconEngine::isNull() const;
+{
+    return getIcon().isNull();
+}
+*/
+
+void QExtendedIconEngine::virtual_hook(int id, void *data)
+{
+    switch (id)
+    {
+        case QIconEngine::IsNullHook:
+        {
+            *reinterpret_cast<bool*>(data) = getIcon().isNull();
+            break;
+        }
+        default:
+        {
+            QIconEngine::virtual_hook(id, data);
+            break;
+        }
+    }
+}
+
+void QExtendedIconEngine::setIcon(const QIcon &icon)
+{
+    this->icon = QIcon(icon);
+}
+
+void QExtendedIconEngine::setFallback(const QExtendedIconEngine &fallback)
+{
+    this->fallback = std::make_shared<QExtendedIconEngine>(QExtendedIconEngine(fallback));
+}
+
+void QExtendedIconEngine::setFallback(std::shared_ptr<QExtendedIconEngine> fallback)
+{
+    this->fallback = fallback;
+}
+
+void QExtendedIconEngine::set(const QIcon &icon, const QExtendedIconEngine &fallback)
+{
+    setIcon(icon);
+    setFallback(fallback);
+}
+
+void QExtendedIconEngine::set(const QIcon &icon, std::shared_ptr<QExtendedIconEngine> fallback)
+{
+    setIcon(icon);
+    setFallback(fallback);
+}
+
+void QExtendedIconEngine::unsetIcon()
+{
+    this->icon = QIcon();
+}
+
+void QExtendedIconEngine::unsetFallback()
+{
+    this->fallback = nullptr;
+}
+
+void QExtendedIconEngine::unset()
+{
+    unsetIcon();
+    unsetFallback();
+}
+
+bool QExtendedIconEngine::hasFallback() const
+{
+    return (this->fallback != nullptr);
+}
+
+QIcon QExtendedIconEngine::getIcon() const
+{
+    if (this->icon.isNull())
+    {
+        if (this->fallback != nullptr)
+        {
+            return this->fallback.get()->getIcon();
+        }
+        else
+        {
+            return QIcon();
+        }
+    }
+    else
+    {
+        return this->icon;
+    }
+}
+
+QIcon QExtendedIconEngine::getIconDefault() const
+{
+    return this->icon;
+}
+
+std::shared_ptr<QExtendedIconEngine> QExtendedIconEngine::getFallback() const
+{
+    return this->fallback;
+}
+
+QT_END_NAMESPACE
diff --git a/src/ui/ui.pro b/src/ui/ui.pro
index 8b95187..4b93c68 100644
--- a/src/ui/ui.pro
+++ b/src/ui/ui.pro
@@ -109,7 +109,8 @@ SOURCES += main.cpp\
     Search/searchinstance.cpp \
     stats.cpp \
     Sessions/backupservice.cpp \
-    svgiconengine.cpp
+    svgiconengine.cpp \
+    qextendediconengine.cpp
 
 HEADERS  += include/mainwindow.h \
     include/topeditorcontainer.h \
@@ -158,7 +159,8 @@ HEADERS  += include/mainwindow.h \
     include/Search/searchinstance.h \
     include/stats.h \
     include/Sessions/backupservice.h \
-    include/svgiconengine.h
+    include/svgiconengine.h \
+    include/qextendediconengine.h
 
 FORMS    += mainwindow.ui \
     frmabout.ui \
